{"is_source_file": true, "format": "Python", "description": "This file implements a client class for interacting with the JIRA REST API, including methods for fetching, searching, and creating issues, along with error handling and configuration validation.", "external_files": ["httpx"], "external_methods": ["httpx.AsyncClient", "httpx.HTTPStatusError"], "published": ["JiraClient", "JiraConfigError"], "classes": [{"name": "JiraClient", "description": "A wrapper class providing methods to interact with JIRA REST API safely, including authentication, issue retrieval, search, and creation."}, {"name": "JiraConfigError", "description": "Custom exception class indicating missing or invalid JIRA configuration."}], "methods": [{"name": "None __init__( self, base_url: Optional[str], email: Optional[str], api_token: Optional[str], cloud_instance: bool = True, timeout: float = 15.0, )", "description": "Initializes the JiraClient with configuration options such as base URL, email, API token, and timeout.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "None _ensure_configured(self)", "description": "Checks whether the client is properly configured; raises JiraConfigError if not.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "Dict[str,str] _auth_headers(self)", "description": "Generates the authorization headers needed for API requests using basic auth.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "httpx.AsyncClient _client(self)", "description": "Creates and returns an asynchronous HTTPX client instance with the specified timeout.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "Optional[Dict[str,Any]] get_issue(self, key: str)", "description": "Fetches a specific issue from JIRA by its key; returns the issue data or None if not found.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "Dict[str,Any] search_issues( self, jql: str, start_at: int = 0, max_results: int = 50, fields: Optional[List[str]] = None, )", "description": "Performs a JQL search query on JIRA; returns the raw JSON response.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "Dict[str,Any] create_issue(self, project_key: str, summary: str, issue_type: str = \"Task\", fields: Optional[Dict[str, Any]] = None)", "description": "Creates a new JIRA issue with the provided project key, summary, issue type, and additional fields.", "scope": "JiraClient", "scopeKind": "class"}], "calls": ["httpx.AsyncClient", "httpx.HTTPStatusError", "resp.raise_for_status()", "resp.json()", "logger.warning"], "search-terms": ["JiraClient", "rest/api/3/issue", "search_issues", "create_issue", "JiraConfigError", "async", "api_token", "base_url"], "state": 2, "file_id": 14, "knowledge_revision": 39, "git_revision": "cfe0c2139412a788ce2cc53a92db5520dc0518e7", "revision_history": [{"29": ""}, {"39": "cfe0c2139412a788ce2cc53a92db5520dc0518e7"}], "ctags": [{"_type": "tag", "name": "JiraClient", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^class JiraClient:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "JiraConfigError", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^class JiraConfigError(RuntimeError):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    def __init__($/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "( self, base_url: Optional[str], email: Optional[str], api_token: Optional[str], cloud_instance: bool = True, timeout: float = 15.0, )", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "_auth_headers", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    def _auth_headers(self) -> Dict[str, str]:$/", "language": "Python", "typeref": "typename:Dict[str,str]", "kind": "member", "signature": "(self)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "_client", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def _client(self) -> httpx.AsyncClient:$/", "language": "Python", "typeref": "typename:httpx.AsyncClient", "kind": "member", "signature": "(self)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "_ensure_configured", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    def _ensure_configured(self) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "create_issue", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def create_issue(self, project_key: str, summary: str, issue_type: str = \"Task\", field/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, project_key: str, summary: str, issue_type: str = \"Task\", fields: Optional[Dict[str, Any]] = None)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "get_issue", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def get_issue(self, key: str) -> Optional[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Optional[Dict[str,Any]]", "kind": "member", "signature": "(self, key: str)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^logger = logging.getLogger(__name__)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "search_issues", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def search_issues($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "( self, jql: str, start_at: int = 0, max_results: int = 50, fields: Optional[List[str]] = None, )", "scope": "JiraClient", "scopeKind": "class"}], "hash": "5e20843c510e2571b7c2bfbfd35cfc65", "format-version": 4, "code-base-name": "jira_mcp_backend", "filename": "jira_mcp_backend/app/services/jira_client.py", "fields": [{"name": "logger = logging.getLogger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}]}