{"is_source_file": true, "format": "Python", "description": "This file contains the implementation of a Jira API client class, error handling, and FastAPI dependency function for integrating Jira REST API interactions asynchronously using httpx.", "external_files": ["app.core.config"], "external_methods": ["get_settings"], "published": ["JiraClient", "JiraClientError", "get_jira_client"], "classes": [{"name": "JiraClientError", "description": "Custom exception class representing errors during interaction with the Jira API."}, {"name": "JiraClient", "description": "Asynchronous Jira API client supporting issue searching and creation with authentication, retries, and proper resource cleanup."}], "methods": [{"name": "JiraClient.__init__", "description": "Initializes the JiraClient with base URL, credentials, and optional timeout."}, {"name": "JiraClient._get_client", "description": "Lazily initializes and returns an httpx.AsyncClient instance for making API calls."}, {"name": "JiraClient._basic_token", "description": "Generates a base64-encoded basic auth token from email and API token."}, {"name": "JiraClient._request_with_retries", "description": "Performs an HTTP request with retries and exponential backoff for server errors."}, {"name": "JiraClient._safe_response_text", "description": "Safely extracts text from an HTTP response, handling exceptions."}, {"name": "JiraClient.search_issues", "description": "Public method to perform a JQL search for issues."}, {"name": "JiraClient.create_issue", "description": "Creates a new Jira issue with specified project, summary, description, and issue type."}, {"name": "JiraClient.aclose", "description": "Closes the underlying HTTP client asynchronously."}, {"name": "JiraClient get_jira_client()", "description": "FastAPI dependency factory that constructs and provides a JiraClient using application settings.", "scope": "", "scopeKind": ""}, {"name": "None __init__(self, base_url: str, email: str, api_token: str, timeout: float = 15.0)", "scope": "JiraClient", "scopeKind": "class", "description": "unavailable"}, {"name": "__init__(self, message: str, status_code: int = 502, details: Any | None = None)", "scope": "JiraClientError", "scopeKind": "class", "description": "unavailable"}, {"name": "str _basic_token(self)", "scope": "JiraClient", "scopeKind": "class", "description": "unavailable"}, {"name": "httpx.AsyncClient _get_client(self)", "scope": "JiraClient", "scopeKind": "class", "description": "unavailable"}, {"name": "httpx.Response _request_with_retries(self, method: str, url: str, **kwargs)", "scope": "JiraClient", "scopeKind": "class", "description": "unavailable"}, {"name": "str _safe_response_text(self, response: httpx.Response)", "scope": "JiraClient", "scopeKind": "class", "description": "unavailable"}, {"name": "None aclose(self)", "scope": "JiraClient", "scopeKind": "class", "description": "unavailable"}, {"name": "Dict[str,Any] create_issue(self, project_key: str, summary: str, description: Optional[str], issuetype: str)", "scope": "JiraClient", "scopeKind": "class", "description": "unavailable"}, {"name": "Dict[str,Any] search_issues(self, jql: str, fields: Optional[List[str]] = None, max_results: int = 25)", "scope": "JiraClient", "scopeKind": "class", "description": "unavailable"}], "calls": ["httpx.AsyncClient", "httpx.Request", "httpx.Response", "base64.b64encode", "asyncio.sleep", "resp.json()", "get_settings"], "search-terms": ["JiraClient", "async api client", "FastAPI dependency", "issue search", "issue creation", "exponential backoff"], "state": 2, "file_id": 12, "knowledge_revision": 43, "git_revision": "", "revision_history": [{"25": ""}, {"43": ""}], "ctags": [{"_type": "tag", "name": "JiraClient", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^class JiraClient:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "JiraClientError", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^class JiraClientError(Exception):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    def __init__(self, base_url: str, email: str, api_token: str, timeout: float = 15.0) -> None/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, base_url: str, email: str, api_token: str, timeout: float = 15.0)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    def __init__(self, message: str, status_code: int = 502, details: Any | None = None):$/", "language": "Python", "kind": "member", "signature": "(self, message: str, status_code: int = 502, details: Any | None = None)", "scope": "JiraClientError", "scopeKind": "class"}, {"_type": "tag", "name": "_basic_token", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    def _basic_token(self) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "_get_client", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def _get_client(self) -> httpx.AsyncClient:$/", "language": "Python", "typeref": "typename:httpx.AsyncClient", "kind": "member", "signature": "(self)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "_request_with_retries", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def _request_with_retries(self, method: str, url: str, **kwargs) -> httpx.Response:$/", "language": "Python", "typeref": "typename:httpx.Response", "kind": "member", "signature": "(self, method: str, url: str, **kwargs)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "_safe_response_text", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def _safe_response_text(self, response: httpx.Response) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, response: httpx.Response)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "aclose", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def aclose(self) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "create_issue", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def create_issue(self, project_key: str, summary: str, description: Optional[str], iss/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, project_key: str, summary: str, description: Optional[str], issuetype: str)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "get_jira_client", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^def get_jira_client() -> JiraClient:$/", "language": "Python", "typeref": "typename:JiraClient", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "search_issues", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def search_issues(self, jql: str, fields: Optional[List[str]] = None, max_results: int/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, jql: str, fields: Optional[List[str]] = None, max_results: int = 25)", "scope": "JiraClient", "scopeKind": "class"}], "hash": "6407e38107fd5611b8e378f6b6643c40", "format-version": 4, "code-base-name": "jira_mcp_backend", "filename": "jira_mcp_backend/app/services/jira_client.py"}