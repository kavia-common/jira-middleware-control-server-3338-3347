{"is_source_file": true, "format": "Python", "description": "This is a Python source file implementing a comprehensive asynchronous JIRA API client. It defines custom exceptions, manages HTTP requests with retries and error handling, and provides methods for various JIRA operations such as issue searching, creation, linking, transitions, comments, sprints, and boards. The class supports both REST API v3 endpoints and Agile endpoints, with configuration-dependent field mappings.", "external_files": ["app.core.config"], "external_methods": ["get_settings"], "published": ["JiraClient", "JiraClientError", "get_jira_client"], "classes": [{"name": "JiraClientError", "description": "Custom exception class for errors interacting with the JIRA API."}, {"name": "JiraClient", "description": "Main asynchronous client class for interacting with JIRA REST API, supporting issue management, sprints, boards, transitions, comments, and custom fields."}], "methods": [{"name": "Dict[str,Any] search_issues(self, jql: str, fields: Optional[List[str]] = None, max_results: int = 25)", "description": "Search issues using JQL.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "Dict[str,Any] create_issue(self, project_key: str, summary: str, description: Optional[str], issuetype: str)", "description": "Create a new issue in a specified project.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "Dict[str,str] get_field_mappings(self)", "description": "Discover and cache custom field IDs for Epic Link, Epic Name, and Story points.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "Dict[str,Any] create_epic(self, request: Any)", "description": "Create a new Epic issue with provided details.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "Dict[str,Any] create_story(self, request: Any)", "description": "Create a new Story issue, optionally linking to an epic and setting story points.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "Dict[str,Any] link_issue_to_epic(self, epic_key_or_id: str, issue_key_or_id: str)", "description": "Link an issue to an Epic by setting the Epic Link custom field.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "Dict[str,Any] get_transitions(self, issue_key: str)", "description": "Fetch available transitions for an issue.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "Dict[str,Any] transition_issue(self, issue_key: str, transition_id: str)", "description": "Transition an issue to a different status.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "Dict[str,Any] add_comment(self, issue_key: str, body: str)", "description": "Add a comment to an issue.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "Dict[str,Any] estimate_story_points(self, issue_key: str, points: float)", "description": "Set or update story points for an issue.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "Dict[str,Any] list_boards(self, project_key_or_id: Optional[str] = None)", "description": "List boards, optionally filtered by project.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "Dict[str,Any] list_sprints(self, board_id: int, state: Optional[str] = None)", "description": "List sprints for a specific board.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "Dict[str,Any] create_sprint(self, payload: Dict[str, Any])", "description": "Create a new sprint.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "Dict[str,Any] update_sprint(self, sprint_id: int, payload: Dict[str, Any])", "description": "Update details of an existing sprint.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "Dict[str,Any] move_issues_to_sprint(self, sprint_id: int, issue_keys: List[str])", "description": "Move multiple issues into a sprint.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "Dict[str,Any] get_sprint_issues(self, sprint_id: int, jql_filters: Optional[str] = None)", "description": "Retrieve issues in a sprint, with optional filters.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "Dict[str,Any] search_issues_via_params( self, project: Optional[str] = None, board_id: Optional[int] = None, sprint_id: Optional[int] = None, assignee: Optional[str] = None, status: Optional[str] = None, )", "description": "Build and execute a JQL search from various parameters.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "None aclose(self)", "description": "Close the underlying HTTPX client.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "None __init__(self, base_url: str, email: str, api_token: str, timeout: float = 15.0)", "scope": "JiraClient", "scopeKind": "class", "description": "unavailable"}, {"name": "__init__(self, message: str, status_code: int = 502, details: Any | None = None)", "scope": "JiraClientError", "scopeKind": "class", "description": "unavailable"}, {"name": "str _agile_url(self, path: str)", "scope": "JiraClient", "scopeKind": "class", "description": "unavailable"}, {"name": "str _basic_token(self)", "scope": "JiraClient", "scopeKind": "class", "description": "unavailable"}, {"name": "httpx.AsyncClient _get_client(self)", "scope": "JiraClient", "scopeKind": "class", "description": "unavailable"}, {"name": "httpx.Response _request_with_retries(self, method: str, url: str, **kwargs)", "scope": "JiraClient", "scopeKind": "class", "description": "unavailable"}, {"name": "str _safe_response_text(self, response: httpx.Response)", "scope": "JiraClient", "scopeKind": "class", "description": "unavailable"}, {"name": "JiraClient get_jira_client()", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["get_settings", "httpx.AsyncClient", "asyncio.sleep", "resp.json", "resp.text", "get_settings", "resp.json"], "search-terms": ["JiraClient", "async API client", "issue creation", "sprint management", "custom fields", "issue linking", "issue searching", "Agile endpoints", "rate limiting", "error handling"], "state": 2, "file_id": 12, "knowledge_revision": 54, "git_revision": "042a23f3b5e831a9ef9e692b08e8f14072623d4d", "revision_history": [{"25": ""}, {"43": ""}, {"47": "4467dda3e275c4c53669082d58325bf2d5d1c8ff"}, {"48": "4467dda3e275c4c53669082d58325bf2d5d1c8ff"}, {"49": "4467dda3e275c4c53669082d58325bf2d5d1c8ff"}, {"51": "042a23f3b5e831a9ef9e692b08e8f14072623d4d"}, {"52": "042a23f3b5e831a9ef9e692b08e8f14072623d4d"}, {"53": "042a23f3b5e831a9ef9e692b08e8f14072623d4d"}, {"54": "042a23f3b5e831a9ef9e692b08e8f14072623d4d"}], "ctags": [{"_type": "tag", "name": "JiraClient", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^class JiraClient:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "JiraClientError", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^class JiraClientError(Exception):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    def __init__(self, base_url: str, email: str, api_token: str, timeout: float = 15.0) -> None/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, base_url: str, email: str, api_token: str, timeout: float = 15.0)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    def __init__(self, message: str, status_code: int = 502, details: Any | None = None):$/", "language": "Python", "kind": "member", "signature": "(self, message: str, status_code: int = 502, details: Any | None = None)", "scope": "JiraClientError", "scopeKind": "class"}, {"_type": "tag", "name": "_agile_url", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    def _agile_url(self, path: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, path: str)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "_basic_token", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    def _basic_token(self) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "_get_client", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def _get_client(self) -> httpx.AsyncClient:$/", "language": "Python", "typeref": "typename:httpx.AsyncClient", "kind": "member", "signature": "(self)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "_request_with_retries", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def _request_with_retries(self, method: str, url: str, **kwargs) -> httpx.Response:$/", "language": "Python", "typeref": "typename:httpx.Response", "kind": "member", "signature": "(self, method: str, url: str, **kwargs)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "_safe_response_text", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def _safe_response_text(self, response: httpx.Response) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, response: httpx.Response)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "aclose", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def aclose(self) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "add_comment", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def add_comment(self, issue_key: str, body: str) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, issue_key: str, body: str)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "create_epic", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def create_epic(self, request: Any) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, request: Any)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "create_issue", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def create_issue(self, project_key: str, summary: str, description: Optional[str], iss/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, project_key: str, summary: str, description: Optional[str], issuetype: str)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "create_sprint", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def create_sprint(self, payload: Dict[str, Any]) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, payload: Dict[str, Any])", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "create_story", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def create_story(self, request: Any) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, request: Any)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "estimate_story_points", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def estimate_story_points(self, issue_key: str, points: float) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, issue_key: str, points: float)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "get_field_mappings", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def get_field_mappings(self) -> Dict[str, str]:$/", "language": "Python", "typeref": "typename:Dict[str,str]", "kind": "member", "signature": "(self)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "get_jira_client", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^def get_jira_client() -> JiraClient:$/", "language": "Python", "typeref": "typename:JiraClient", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "get_sprint_issues", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def get_sprint_issues(self, sprint_id: int, jql_filters: Optional[str] = None) -> Dict/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, sprint_id: int, jql_filters: Optional[str] = None)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "get_transitions", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def get_transitions(self, issue_key: str) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, issue_key: str)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "link_issue_to_epic", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def link_issue_to_epic(self, epic_key_or_id: str, issue_key_or_id: str) -> Dict[str, A/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, epic_key_or_id: str, issue_key_or_id: str)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "list_boards", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def list_boards(self, project_key_or_id: Optional[str] = None) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, project_key_or_id: Optional[str] = None)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "list_sprints", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def list_sprints(self, board_id: int, state: Optional[str] = None) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, board_id: int, state: Optional[str] = None)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "move_issues_to_sprint", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def move_issues_to_sprint(self, sprint_id: int, issue_keys: List[str]) -> Dict[str, An/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, sprint_id: int, issue_keys: List[str])", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "search_issues", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def search_issues(self, jql: str, fields: Optional[List[str]] = None, max_results: int/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, jql: str, fields: Optional[List[str]] = None, max_results: int = 25)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "search_issues_via_params", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def search_issues_via_params($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "( self, project: Optional[str] = None, board_id: Optional[int] = None, sprint_id: Optional[int] = None, assignee: Optional[str] = None, status: Optional[str] = None, )", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "transition_issue", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def transition_issue(self, issue_key: str, transition_id: str) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, issue_key: str, transition_id: str)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "update_sprint", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/services/jira_client.py", "pattern": "/^    async def update_sprint(self, sprint_id: int, payload: Dict[str, Any]) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, sprint_id: int, payload: Dict[str, Any])", "scope": "JiraClient", "scopeKind": "class"}], "hash": "01a358b82a16e28badb4894b9ba507ce", "format-version": 4, "code-base-name": "jira_mcp_backend", "filename": "jira_mcp_backend/app/services/jira_client.py"}