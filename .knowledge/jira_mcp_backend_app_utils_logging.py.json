{"is_source_file": true, "format": "Python", "description": "This file defines logging configuration and utility functions for structured, request-aware logging within a Python application, including context-aware timing and external logger management.", "external_files": ["sys", "time", "contextlib", "typing"], "external_methods": ["logging.getLogger", "logging.StreamHandler", "logging.Formatter", "logging.Filter", "logging.getLevelName", "logging.removeHandler", "logging.setLevel", "logging.addHandler"], "published": ["configure_logging", "log_debug_with_context", "timed_log_debug"], "classes": [{"name": "RequestIDFilter", "description": "A custom logging filter that injects request_id into log records if present."}], "methods": [{"name": "None configure_logging(level: str = \"INFO\")", "description": "Sets up structured logging for the application and Uvicorn, configuring handlers, formatters, and log levels.", "scope": "", "scopeKind": ""}, {"name": "None log_debug_with_context(message: str, request_id: Optional[str] = None, extra: Optional[Dict[str, Any]] = None)", "description": "Logs a debug message with optional request_id and additional context information.", "scope": "", "scopeKind": ""}, {"name": "timed_log_debug(message: str, request_id: Optional[str] = None, extra: Optional[Dict[str, Any]] = None)", "description": "A context manager that times a code block and logs its duration at debug level, including request_id and extra context.", "scope": "", "scopeKind": ""}, {"name": "bool filter(self, record: logging.LogRecord)", "scope": "RequestIDFilter", "scopeKind": "class", "description": "unavailable"}], "calls": ["logging.getLogger", "logging.StreamHandler", "logging.Formatter", "logging.getLevelName", "logging.removeHandler", "logging.setLevel", "logging.addHandler", "logger.debug"], "search-terms": ["logging configuration", "request_id logging filter", "structured logging", "Uvicorn log setup", "timed debug context"], "state": 2, "file_id": 17, "knowledge_revision": 61, "git_revision": "4467dda3e275c4c53669082d58325bf2d5d1c8ff", "revision_history": [{"35": ""}, {"44": "4467dda3e275c4c53669082d58325bf2d5d1c8ff"}, {"61": "4467dda3e275c4c53669082d58325bf2d5d1c8ff"}], "ctags": [{"_type": "tag", "name": "RequestIDFilter", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/utils/logging.py", "pattern": "/^class RequestIDFilter(logging.Filter):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "configure_logging", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/utils/logging.py", "pattern": "/^def configure_logging(level: str = \"INFO\") -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "(level: str = \"INFO\")"}, {"_type": "tag", "name": "filter", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/utils/logging.py", "pattern": "/^    def filter(self, record: logging.LogRecord) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, record: logging.LogRecord)", "scope": "RequestIDFilter", "scopeKind": "class"}, {"_type": "tag", "name": "log_debug_with_context", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/utils/logging.py", "pattern": "/^def log_debug_with_context(message: str, request_id: Optional[str] = None, extra: Optional[Dict[/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "(message: str, request_id: Optional[str] = None, extra: Optional[Dict[str, Any]] = None)"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/utils/logging.py", "pattern": "/^logger = logging.getLogger(\"jira_mcp\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "timed_log_debug", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/utils/logging.py", "pattern": "/^def timed_log_debug(message: str, request_id: Optional[str] = None, extra: Optional[Dict[str, An/", "language": "Python", "kind": "function", "signature": "(message: str, request_id: Optional[str] = None, extra: Optional[Dict[str, Any]] = None)"}], "hash": "d52f89a5e29bb250b87c40c334776a71", "format-version": 4, "code-base-name": "jira_mcp_backend", "filename": "jira_mcp_backend/app/utils/logging.py", "fields": [{"name": "logger = logging.getLogger(\"jira_mcp\")", "scope": "", "scopeKind": "", "description": "unavailable"}]}