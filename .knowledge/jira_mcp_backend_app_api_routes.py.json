{"is_source_file": true, "format": "Python", "description": "This source file defines API route handlers for a FastAPI application managing JIRA issues and health checks. It includes endpoints for health status, searching JIRA issues, and creating JIRA issues, using dependency injection for the JIRA client and handling errors appropriately.", "external_files": ["app.models.jira", "app.services.jira_client", "app.main"], "external_methods": ["get_jira_client", "read_version"], "published": ["api_router"], "classes": [], "methods": [{"name": "Dict[str,Any] health(request: Request)", "description": "Health check endpoint returning application status, version, and request ID.", "scope": "", "scopeKind": ""}, {"name": "JiraSearchResponse jira_search( request: Request, jql: str = Query(..., description=\"JQL query string\"), fields: Optional[List[str]] = Query(None, description=\"Fields to include\"), max_results: int = Query(25, ge=1, le=100, description=\"Max results\"), client: JiraClient = Depends(get_jira_client), )", "description": "Endpoint to search JIRA issues based on a JQL query, with optional fields and max results.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] jira_create_issue( request: Request, payload: CreateIssueRequest, client: JiraClient = Depends(get_jira_client), )", "description": "Endpoint to create a new JIRA issue with provided details.", "scope": "", "scopeKind": ""}], "calls": ["get_jira_client", "read_version", "client.search_issues", "getattr", "client.create_issue"], "search-terms": ["fastapi routes", "JIRA API", "health check endpoint", "search issues", "create issue", "JiraClient", "APIRouter"], "state": 2, "file_id": 8, "knowledge_revision": 40, "git_revision": "", "revision_history": [{"17": ""}, {"40": ""}], "ctags": [{"_type": "tag", "name": "api_router", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^api_router = APIRouter()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "health", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^async def health(request: Request) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(request: Request)"}, {"_type": "tag", "name": "jira_create_issue", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^async def jira_create_issue($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( request: Request, payload: CreateIssueRequest, client: JiraClient = Depends(get_jira_client), )"}, {"_type": "tag", "name": "jira_search", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^async def jira_search($/", "language": "Python", "typeref": "typename:JiraSearchResponse", "kind": "function", "signature": "( request: Request, jql: str = Query(..., description=\"JQL query string\"), fields: Optional[List[str]] = Query(None, description=\"Fields to include\"), max_results: int = Query(25, ge=1, le=100, description=\"Max results\"), client: JiraClient = Depends(get_jira_client), )"}], "hash": "172a7de633c85e2af90d41afb148134e", "format-version": 4, "code-base-name": "jira_mcp_backend", "filename": "jira_mcp_backend/app/api/routes.py", "fields": [{"name": "api_router = APIRouter()", "scope": "", "scopeKind": "", "description": "unavailable"}]}