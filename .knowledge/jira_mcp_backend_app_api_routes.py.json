{"is_source_file": true, "format": "Python", "description": "This file defines API routes for a FastAPI-based backend that interacts with JIRA. It includes endpoints for health checks, searching issues, creating issues and epics, linking issues to epics, listing boards and sprints, creating and updating sprints, moving issues between sprints, fetching sprint issues, filtering issues, transitioning issues, adding comments, setting estimates, and capacity planning. The file leverages dependencies such as a JiraClient and various request/response models, and it organizes routes with clear tags and summaries.", "external_files": ["app.models.jira", "app.services.jira_client", "app.main"], "external_methods": ["get_jira_client", "read_version"], "published": ["api_router"], "classes": [], "methods": [{"name": "Dict[str,Any] _wrap_success(data: Any, request: Request)", "description": "Wraps successful responses to include data and request ID.", "scope": "", "scopeKind": ""}, {"name": "None _raise_http_error(e: JiraClientError, request: Request)", "description": "Maps JiraClientError exceptions to HTTPExceptions with standardized error info.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] add_comment( request: Request, issueKey: str = Path(..., description=\"Issue key\"), body: str = Query(..., description=\"Comment body\"), client: JiraClient = Depends(get_jira_client), x_idempotency_key: Optional[str] = Header(default=None, convert_underscores=False, alias=\"X-Idempotency-Key\"), )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "CapacityResponse capacity_plan( request: Request, payload: CapacityRequest, )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Dict[str,Any] create_epic( request: Request, payload: CreateEpicRequest, client: JiraClient = Depends(get_jira_client), x_idempotency_key: Optional[str] = Header(default=None, convert_underscores=False, alias=\"X-Idempotency-Key\"), )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Dict[str,Any] create_sprint( request: Request, payload: CreateSprintRequest, client: JiraClient = Depends(get_jira_client), x_idempotency_key: Optional[str] = Header(default=None, convert_underscores=False, alias=\"X-Idempotency-Key\"), )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Dict[str,Any] create_story( request: Request, payload: CreateStoryRequest, client: JiraClient = Depends(get_jira_client), x_idempotency_key: Optional[str] = Header(default=None, convert_underscores=False, alias=\"X-Idempotency-Key\"), )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Dict[str,Any] get_sprint_issues( request: Request, sprintId: int = Path(..., description=\"Sprint ID\"), jql_filters: Optional[str] = Query(default=None, description=\"Optional additional JQL clauses\"), client: JiraClient = Depends(get_jira_client), )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Dict[str,Any] health(request: Request)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Dict[str,Any] issues_via_params( request: Request, project: Optional[str] = Query(default=None, description=\"Project key\"), board_id: Optional[int] = Query(default=None, description=\"Board ID (info only; use sprintId to filter)\"), sprint_id: Optional[int] = Query(default=None, description=\"Sprint ID\"), assignee: Optional[str] = Query(default=None, description=\"Assignee display name or accountId\"), status: Optional[str] = Query(default=None, description=\"Workflow status name\"), client: JiraClient = Depends(get_jira_client), )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Dict[str,Any] jira_create_issue( request: Request, payload: CreateIssueRequest, client: JiraClient = Depends(get_jira_client), x_idempotency_key: Optional[str] = Header(default=None, convert_underscores=False, alias=\"X-Idempotency-Key\"), )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "JiraSearchResponse jira_search( request: Request, jql: str = Query(..., description=\"JQL query string\"), fields: Optional[List[str]] = Query(None, description=\"Fields to include\"), max_results: int = Query(25, ge=1, le=100, description=\"Max results\"), client: JiraClient = Depends(get_jira_client), )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Dict[str,Any] link_issue_to_epic( request: Request, payload: LinkIssueToEpicRequest, client: JiraClient = Depends(get_jira_client), )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Dict[str,Any] list_boards( request: Request, project_key_or_id: Optional[str] = Query(default=None, description=\"Filter by project key or id\"), client: JiraClient = Depends(get_jira_client), )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Dict[str,Any] list_sprints( request: Request, boardId: int = Path(..., description=\"Board ID\"), state: Optional[str] = Query(default=None, description='Filter by state: \"future,active,closed\"'), client: JiraClient = Depends(get_jira_client), )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Dict[str,Any] move_issues_to_sprint( request: Request, sprintId: int = Path(..., description=\"Sprint ID\"), payload: MoveIssuesToSprintRequest = ..., client: JiraClient = Depends(get_jira_client), )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Dict[str,Any] set_estimate( request: Request, issueKey: str = Path(..., description=\"Issue key\"), points: float = Query(..., ge=0, description=\"Story points value\"), client: JiraClient = Depends(get_jira_client), )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Dict[str,Any] transition_issue( request: Request, issueKey: str = Path(..., description=\"Issue key\"), transition_id: Optional[str] = Query(default=None, description=\"Transition ID\"), transition_name: Optional[str] = Query(default=None, description=\"Transition name (resolved to ID if provided)\"), client: JiraClient = Depends(get_jira_client), )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Dict[str,Any] update_sprint( request: Request, sprintId: int = Path(..., description=\"Sprint ID\"), payload: UpdateSprintRequest = ..., client: JiraClient = Depends(get_jira_client), )", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["get_jira_client", "read_version", "client.search_issues", "client.create_issue", "client.create_epic", "client.create_story", "client.link_issue_to_epic", "client.list_boards", "client.list_sprints", "client.create_sprint", "client.update_sprint", "client.move_issues_to_sprint", "client.get_sprint_issues", "client.search_issues_via_params", "client.get_transitions", "client.transition_issue", "client.add_comment", "client.estimate_story_points", "client.get_jira_client"], "search-terms": ["jira", "sprint", "epic", "issue creation", "capacity planning", "issue transition", "comments", "story points", "board", "search"], "state": 2, "file_id": 8, "knowledge_revision": 50, "git_revision": "4467dda3e275c4c53669082d58325bf2d5d1c8ff", "revision_history": [{"17": ""}, {"40": ""}, {"50": "4467dda3e275c4c53669082d58325bf2d5d1c8ff"}], "ctags": [{"_type": "tag", "name": "_raise_http_error", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^def _raise_http_error(e: JiraClientError, request: Request) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "(e: JiraClientError, request: Request)"}, {"_type": "tag", "name": "_wrap_success", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^def _wrap_success(data: Any, request: Request) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(data: Any, request: Request)"}, {"_type": "tag", "name": "add_comment", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^async def add_comment($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( request: Request, issueKey: str = Path(..., description=\"Issue key\"), body: str = Query(..., description=\"Comment body\"), client: JiraClient = Depends(get_jira_client), x_idempotency_key: Optional[str] = Header(default=None, convert_underscores=False, alias=\"X-Idempotency-Key\"), )"}, {"_type": "tag", "name": "api_router", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^api_router = APIRouter()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "capacity_plan", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^async def capacity_plan($/", "language": "Python", "typeref": "typename:CapacityResponse", "kind": "function", "signature": "( request: Request, payload: CapacityRequest, )"}, {"_type": "tag", "name": "create_epic", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^async def create_epic($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( request: Request, payload: CreateEpicRequest, client: JiraClient = Depends(get_jira_client), x_idempotency_key: Optional[str] = Header(default=None, convert_underscores=False, alias=\"X-Idempotency-Key\"), )"}, {"_type": "tag", "name": "create_sprint", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^async def create_sprint($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( request: Request, payload: CreateSprintRequest, client: JiraClient = Depends(get_jira_client), x_idempotency_key: Optional[str] = Header(default=None, convert_underscores=False, alias=\"X-Idempotency-Key\"), )"}, {"_type": "tag", "name": "create_story", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^async def create_story($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( request: Request, payload: CreateStoryRequest, client: JiraClient = Depends(get_jira_client), x_idempotency_key: Optional[str] = Header(default=None, convert_underscores=False, alias=\"X-Idempotency-Key\"), )"}, {"_type": "tag", "name": "get_sprint_issues", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^async def get_sprint_issues($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( request: Request, sprintId: int = Path(..., description=\"Sprint ID\"), jql_filters: Optional[str] = Query(default=None, description=\"Optional additional JQL clauses\"), client: JiraClient = Depends(get_jira_client), )"}, {"_type": "tag", "name": "health", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^async def health(request: Request) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(request: Request)"}, {"_type": "tag", "name": "issues_via_params", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^async def issues_via_params($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( request: Request, project: Optional[str] = Query(default=None, description=\"Project key\"), board_id: Optional[int] = Query(default=None, description=\"Board ID (info only; use sprintId to filter)\"), sprint_id: Optional[int] = Query(default=None, description=\"Sprint ID\"), assignee: Optional[str] = Query(default=None, description=\"Assignee display name or accountId\"), status: Optional[str] = Query(default=None, description=\"Workflow status name\"), client: JiraClient = Depends(get_jira_client), )"}, {"_type": "tag", "name": "jira_create_issue", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^async def jira_create_issue($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( request: Request, payload: CreateIssueRequest, client: JiraClient = Depends(get_jira_client), x_idempotency_key: Optional[str] = Header(default=None, convert_underscores=False, alias=\"X-Idempotency-Key\"), )"}, {"_type": "tag", "name": "jira_search", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^async def jira_search($/", "language": "Python", "typeref": "typename:JiraSearchResponse", "kind": "function", "signature": "( request: Request, jql: str = Query(..., description=\"JQL query string\"), fields: Optional[List[str]] = Query(None, description=\"Fields to include\"), max_results: int = Query(25, ge=1, le=100, description=\"Max results\"), client: JiraClient = Depends(get_jira_client), )"}, {"_type": "tag", "name": "link_issue_to_epic", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^async def link_issue_to_epic($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( request: Request, payload: LinkIssueToEpicRequest, client: JiraClient = Depends(get_jira_client), )"}, {"_type": "tag", "name": "list_boards", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^async def list_boards($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( request: Request, project_key_or_id: Optional[str] = Query(default=None, description=\"Filter by project key or id\"), client: JiraClient = Depends(get_jira_client), )"}, {"_type": "tag", "name": "list_sprints", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^async def list_sprints($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( request: Request, boardId: int = Path(..., description=\"Board ID\"), state: Optional[str] = Query(default=None, description='Filter by state: \"future,active,closed\"'), client: JiraClient = Depends(get_jira_client), )"}, {"_type": "tag", "name": "move_issues_to_sprint", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^async def move_issues_to_sprint($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( request: Request, sprintId: int = Path(..., description=\"Sprint ID\"), payload: MoveIssuesToSprintRequest = ..., client: JiraClient = Depends(get_jira_client), )"}, {"_type": "tag", "name": "set_estimate", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^async def set_estimate($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( request: Request, issueKey: str = Path(..., description=\"Issue key\"), points: float = Query(..., ge=0, description=\"Story points value\"), client: JiraClient = Depends(get_jira_client), )"}, {"_type": "tag", "name": "transition_issue", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^async def transition_issue($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( request: Request, issueKey: str = Path(..., description=\"Issue key\"), transition_id: Optional[str] = Query(default=None, description=\"Transition ID\"), transition_name: Optional[str] = Query(default=None, description=\"Transition name (resolved to ID if provided)\"), client: JiraClient = Depends(get_jira_client), )"}, {"_type": "tag", "name": "update_sprint", "path": "/home/kavia/workspace/code-generation/jira-middleware-control-server-3338-3347/jira_mcp_backend/app/api/routes.py", "pattern": "/^async def update_sprint($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( request: Request, sprintId: int = Path(..., description=\"Sprint ID\"), payload: UpdateSprintRequest = ..., client: JiraClient = Depends(get_jira_client), )"}], "hash": "336fff4346227c72e9353416bb3a7471", "format-version": 4, "code-base-name": "jira_mcp_backend", "filename": "jira_mcp_backend/app/api/routes.py", "fields": [{"name": "api_router = APIRouter()", "scope": "", "scopeKind": "", "description": "unavailable"}]}